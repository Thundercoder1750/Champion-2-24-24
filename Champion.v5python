{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# vex-vision-config:begin\nvision_5__BLUEBOX = Signature(1, -6449, -4915, -5682,-5989, -4201, -5095,3.9, 0)\nvision_5__REDBOX = Signature(2, 12863, 15019, 13941,-345, 275, -35,3, 0)\nvision_5__GREENBOX = Signature(3, -5149, -5041, -5096,-923, -687, -804,11, 0)\nvision_5__BLUEBOX = Signature(4, -6241, -3379, -4810,-6589, -2721, -4655,2.9, 0)\nvision_5__SIG_5 = Signature(5, 0, 0, 0,0, 0, 0,3, 0)\nvision_5 = Vision(Ports.PORT16, 50, vision_5__BLUEBOX, vision_5__REDBOX, vision_5__GREENBOX, vision_5__BLUEBOX, vision_5__SIG_5)\n# vex-vision-config:end\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\nside_intake = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\ndown = Limit(brain.three_wire_port.a)\nup = Limit(brain.three_wire_port.d)\nhanger = Motor(Ports.PORT9, GearSetting.RATIO_36_1, False)\nwing = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\ninertial_1 = Inertial(Ports.PORT20)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n\n# ----------------------------------------------------------------------------\n# \n#    Project:        Detecting Objects (Vision)\n#    Description:    This project will detect 3 different colored objects\n#                    and display when each object is found on the V5\n#                    Brain's screen.\n#    Configuration:  Vision5 on Port 5\n# \n# ----------------------------------------------------------------------------\n\nimport vex\nfrom math import *\n\n# Begin project code\ncheck_red = vex.Event()\ncheck_blue = vex.Event()\ncheck_green = vex.Event()\ndrivetrain.set_stopping(vex.HOLD)\nleft_motor_a.set_stopping(vex.HOLD)\nleft_motor_b.set_stopping(vex.HOLD)\nright_motor_a.set_stopping(vex.HOLD)\nright_motor_b.set_stopping(vex.HOLD)\nleft_motor_a.set_velocity(40, vex.PERCENT)\nright_motor_a.set_velocity(40, vex.PERCENT)\nleft_motor_b.set_velocity(40, vex.PERCENT)\nright_motor_b.set_velocity(40, vex.PERCENT)\nside_intake.set_velocity(100, vex.PERCENT)\ndrivetrain.set_drive_velocity(100, vex.PERCENT)\ninertial_1.calibrate()\ninertial_1.set_heading(0, vex.DEGREES)\nfront_motors = vex.MotorGroup(left_motor_a, right_motor_a)\nback_motors = vex.MotorGroup(left_motor_b, right_motor_b)\nhanger.set_stopping(vex.HOLD)\nwing.set_stopping(vex.HOLD)\nwait(100, vex.MSEC)\n\n\ndef drive_until_height(height_threshold):\n    while vision_5.largest_object().height <= height_threshold:\n        drivetrain.drive(FORWARD)\n\ndef drive_left():\n    drivetrain.drive(LEFT)\n\ndef drive_until_bluebox_x(x_min, x_max):\n    while not (x_min < vision_5.largest_object().centerX < x_max):\n        drivetrain.drive(FORWARD)\n\ndef drive_until_bluebox_width(width_threshold):\n    while vision_5.largest_object().width <= width_threshold:\n        drivetrain.drive(FORWARD)\n\ndef rotate_90_degrees_right():\n    drivetrain.turn_for(RIGHT,90,DEGREES,wait=False)\n\ndef extend_wing_to_left():\n    wing.spin(FORWARD)\n\ndef take_vision_snapshot():\n    return vision_5.take_snapshot(vision_5__BLUEBOX)\n\n\ndef autonomous():\n    while True:\n        snapshot = take_vision_snapshot()\n\n        # Step 1: Drive until REDBOX is greater than 200 in height\n        drive_until_height(200)\n\n        # Step 2: Drive straight left\n        drive_left()\n\n        # Step 3: Drive forward until BLUEBOX's x is greater than 110 but less than 154\n        drive_until_bluebox_x(110, 154)\n\n        # Step 4: Drive forward until BLUEBOX is greater than 200 in width\n        drive_until_bluebox_width(200)\n\n        # Step 5: Rotate 90 degrees right\n        rotate_90_degrees_right()\n\n        # Step 6: Extend the wing to the left\n        extend_wing_to_left()\n\n        # Step 7: Drive backward\n        drivetrain.drive(REVERSE)\n\n        # Step 8: Stop all motors\n        drivetrain.stop()\n        wing.stop()\n\n\n\n\n# Driver control loop\ndef driver_control():\n    # sets the speed of the drive train\n    left_motor_a.set_velocity(100, vex.PERCENT)\n    right_motor_a.set_velocity(100, vex.PERCENT)\n    left_motor_b.set_velocity(100, vex.PERCENT)\n    right_motor_b.set_velocity(100, vex.PERCENT)\n\n    # the loop that drives the motors\n    while True:\n\n        # the drive train motors setting which joysticks to drive the robot\n        left_motor_a.set_velocity(\n            (controller_1.axis3.position() + controller_1.axis4.position() + controller_1.axis1.position()), vex.PERCENT\n        )\n        left_motor_a.spin(vex.FORWARD)\n        right_motor_a.set_velocity(\n            (controller_1.axis3.position() - controller_1.axis4.position() - controller_1.axis1.position()), vex.PERCENT\n        )\n        right_motor_a.spin(vex.FORWARD)\n        left_motor_b.set_velocity(\n            (controller_1.axis3.position() - controller_1.axis4.position() + controller_1.axis1.position()), vex.PERCENT\n        )\n        left_motor_b.spin(vex.FORWARD)\n        right_motor_b.set_velocity(\n            (controller_1.axis3.position() + controller_1.axis4.position() - controller_1.axis1.position()), vex.PERCENT\n        )\n        right_motor_b.spin(vex.FORWARD)\n        wait(0.1, vex.SECONDS)\n\n        # makes the intake go in or out or stop if nothing is pushed\n        if controller_1.buttonR2.pressing():\n            side_intake.set_velocity(100, vex.PERCENT)\n            side_intake.spin(vex.REVERSE)\n        elif controller_1.buttonR1.pressing():\n            side_intake.set_velocity(100, vex.PERCENT)\n            side_intake.spin(vex.FORWARD)\n        else:\n            side_intake.stop()\n\n        # makes the endgame go up or down or stop\n        if controller_1.buttonUp.pressing() and hanger.position(vex.DEGREES) > 0:\n            hanger.spin(vex.REVERSE)\n        elif controller_1.buttonDown.pressing() and hanger.position(vex.DEGREES) > -1440:\n            hanger.spin(vex.FORWARD)\n        elif controller_1.buttonL2.pressing():\n            hanger.spin_to_position(1260,TURNS,wait=False)\n        else:\n            hanger.stop()\n\n        if controller_1.buttonLeft.pressing() and wing.position(vex.DEGREES) > -645:\n            wing.spin(vex.REVERSE)\n        elif controller_1.buttonRight.pressing() and wing.position(vex.DEGREES) < 645:\n            wing.spin(vex.FORWARD)\n        else:\n            wing.stop()\n\n        wait(20, vex.MSEC)\n\n# set the different modes\ncompetition = vex.Competition(driver_control, autonomous)","textLanguage":"python","rconfig":[{"port":[16],"name":"vision_5","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"BLUEBOX\",\"parameters\":{\"uMin\":-6449,\"uMax\":-4915,\"uMean\":-5682,\"vMin\":-5989,\"vMax\":-4201,\"vMean\":-5095,\"rgb\":1,\"type\":0,\"name\":\"BLUEBOX\"},\"range\":3.9},{\"name\":\"REDBOX\",\"parameters\":{\"uMin\":12863,\"uMax\":15019,\"uMean\":13941,\"vMin\":-345,\"vMax\":275,\"vMean\":-35,\"rgb\":1,\"type\":0,\"name\":\"REDBOX\"},\"range\":3},{\"name\":\"GREENBOX\",\"parameters\":{\"uMin\":-5149,\"uMax\":-5041,\"uMean\":-5096,\"vMin\":-923,\"vMax\":-687,\"vMean\":-804,\"rgb\":1,\"type\":0,\"name\":\"GREENBOX\"},\"range\":11},{\"name\":\"BLUEBOX\",\"parameters\":{\"uMin\":-6241,\"uMax\":-3379,\"uMean\":-4810,\"vMin\":-6589,\"vMax\":-2721,\"vMean\":-4655,\"rgb\":1,\"type\":0,\"name\":\"BLUEBOX\"},\"range\":2.9},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":3},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1,2,3,4,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[7],"name":"side_intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"down","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22},{"port":[4],"name":"up","customName":true,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22},{"port":[9],"name":"hanger","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[10],"name":"wing","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"inertial_1","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"https://www.youtube.com/watch?v=xvFZjo5PgG0"},{"name":"win","url":"https://www.youtube.com/watch?v=xvFZjo5PgG0"}],"v5SoundsEnabled":true,"target":"Physical"}